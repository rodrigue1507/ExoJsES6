{"version":3,"sources":["../es2015/src/generator.js"],"names":["toIterable","sequence","obj","Emitter","receiver"],"mappings":";;;;;;QAMgBA,U,GAAAA,U;QAQCC,Q,GAAAA,Q;;AAdjB;;;;mDAciBA,Q;;AAZjB;;;;AAIO,SAASD,UAAT,CAAoBE,GAApB,EAAyB,CAE/B;;AAED;;;;AAIO,SAAUD,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIP;;;;IAGaE,O;AACT;;;QADSA,O,GAIT,iBAAYC,QAAZ,EAAsB;AAAA;AACrB,C","file":"generator.js","sourceRoot":"es2015","sourcesContent":["import 'babel-polyfill';\r\n\r\n/**\r\n * Même exercice que pour iterator\r\n * Mais en utilisant un generator\r\n */\r\nexport function toIterable(obj) {\r\n  \r\n}\r\n\r\n/**\r\n * exécuter toutes les fonctions et retourner les resultats \r\n * sous forme d'iterator grâce au mot clé yield\r\n */\r\nexport function *sequence(...funcs) {\r\n\r\n}\r\n\r\n/**\r\n * Emet des valeur à lors de l'appel de la methode emit à l'aide d'un generator\r\n */\r\nexport class Emitter {\r\n    /**\r\n     * le receiver est une fonction sera appellé à chaque fois qu'une nouvelle est émise\r\n     */\r\n    constructor(receiver) {\r\n    }\r\n}"]}