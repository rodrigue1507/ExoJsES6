{"version":3,"sources":["../es2015/src/promises.js"],"names":["chain","delay","combine","promises","resultTab","Promise","resolve","reject","i","length","then","push","value","millisecond","setTimeout","promiseA","promiseB","promisesTab","promiseResult","all","values"],"mappings":";;;;;QAOgBA,K,GAAAA,K;QAkBAC,K,GAAAA,K;QAYAC,O,GAAAA,O;;AApChB;;;;;;AAMO,SAASF,KAAT,CAAeG,QAAf,EAAyB;AAC9B,MAAIC,YAAY,EAAhB;AACA,MAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AAC1BD,YAAQ,iBAAS;AACf,WAAI,IAAIE,IAAI,CAAZ,EAAeA,IAAIL,SAASM,MAA5B,EAAoCD,GAApC,EAAwC;AACtCL,iBAASK,CAAT,EAAYE,IAAZ,CAAiB;AAAA,iBAASN,UAAUO,IAAV,CAAeC,KAAf,CAAT;AAAA,SAAjB;AACD;AACF,KAJD;AAOH,GARD;AASA,SAAOR,SAAP;AACD;;AAED;;;;AAIO,SAASH,KAAT,CAAeY,WAAf,EAA4B;AAC/B,SAAO,IAAIR,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACjCQ,eAAW,YAAW;AACpBR;AACD,KAFD,EAEGO,WAFH;AAGD,GAJI,CAAP;AAKH;;AAED;;;;AAIO,SAASX,OAAT,CAAiBa,QAAjB,EAA2BC,QAA3B,EAAqC;AACxC,MAAIC,cAAc,EAAlB;AACAA,cAAYN,IAAZ,CAAiBI,QAAjB;AACAE,cAAYN,IAAZ,CAAiBK,QAAjB;AACA,MAAME,gBAAgBb,QAAQc,GAAR,CAAYF,WAAZ,EAAyBP,IAAzB,CAA+B,UAACU,MAAD,EAAW;AAAC,WAAOA,MAAP;AAAc,GAAzD,CAAtB;AACA,SAAOF,aAAP;AACH","file":"promises.js","sourceRoot":"es2015","sourcesContent":["\r\n/**\r\n * Exécute de manière séquentielle de promises\r\n * \r\n * @param funcs tableau de fonctions retournant une promise\r\n * @return Une promise contenant tous les resultats de promises exécutées\r\n */\r\nexport function chain(promises) {\r\n  let resultTab = [];\r\n  new Promise((resolve,reject)=>{\r\n      resolve(value => {\r\n        for(let i = 0; i < promises.length; i++){\r\n          promises[i].then(value => resultTab.push(value))\r\n        }\r\n      }\r\n\r\n      )\r\n  })\r\n  return resultTab;\r\n}\r\n\r\n/**\r\n * renvoie une promise qui sera resolue au bout d'un nombre définit de millisecondes\r\n * @param millisecond le nombre de millisecondes avant de résoudre la Promise\r\n */\r\nexport function delay(millisecond) {\r\n    return new Promise(function(resolve) {\r\n        setTimeout(function() {\r\n          resolve();\r\n        }, millisecond);\r\n      });\r\n}\r\n\r\n/**\r\n * Chaine l'exécution de deux promise et retourne les résultats dans un tableau\r\n * @return une promise retournant le tableau des resultats des deux promise passées en paramètre\r\n */\r\nexport function combine(promiseA, promiseB) {\r\n    let promisesTab = [];\r\n    promisesTab.push(promiseA);\r\n    promisesTab.push(promiseB);\r\n    const promiseResult = Promise.all(promisesTab).then(((values)=> {return values}));\r\n    return promiseResult \r\n}\r\n"]}